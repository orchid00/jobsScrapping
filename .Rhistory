ggplot(aes(x = skill, y = n)) +
geom_col(fill = "chocolate2") +
labs(x = "Skill", y = "Occurrences (%)",
title = paste0("Skill occurrences(%) for ", jt, " in ", loc)) +
scale_colour_Publication() +
theme_Publication() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
31/50
mybigrams %>% head(n = 20) %>%
mutate(skill = fct_reorder(bigram, -n)) %>%
ggplot(aes(x = skill, y = n)) +
geom_col(fill = "chocolate2") +
labs(x = "Skill", y = "Occurrences (%)",
title = paste0("Skill occurrences(%) for ", jt, " in ", loc)) +
scale_y_continuous(breaks = c("20%", "40%", "60%", "80%", "100%")) +
scale_colour_Publication() +
theme_Publication() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
mybigrams %>% head(n = 20) %>%
mutate(skill = fct_reorder(bigram, -n)) %>%
ggplot(aes(x = skill, y = n)) +
geom_col(fill = "chocolate2") +
labs(x = "Skill", y = "Occurrences (%)",
title = paste0("Skill occurrences(%) for ", jt, " in ", loc)) +
scale_y_continuous(labels = scales::percent, breaks = seq(0, 1, 0.1)) +
scale_colour_Publication() +
theme_Publication() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
# Visualization
mybigrams %>% head(n = 30) %>%
mutate(skill = fct_reorder(bigram, -n)) %>%
ggplot(aes(x = skill, y = n)) +
geom_col(fill = "chocolate2") +
labs(x = "Skill", y = "Occurrences (%)",
title = paste0("Skill occurrences(%) for ", jt, " in ", loc)) +
scale_y_continuous(labels = scales::percent, breaks = seq(0, 1, 0.1)) +
scale_colour_Publication() +
theme_Publication() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
mybigrams %>% head(n = 30) %>%
mutate(skill = fct_reorder(bigram, -n)) %>%
ggplot(aes(x = skill, y = n)) +
geom_col(fill = "chocolate2") +
labs(x = "Skill", y = "Occurrences (%)",
title = paste0("Skill occurrences(%) for ", jt, " in ", loc)) +
scale_y_continuous(labels = scales::percent, breaks = seq(0, 1, 0.1)) +
scale_colour_Publication() +
theme_Publication() +
theme(axis.text.x = element_text(angle = 50, hjust = 1))
# Visualization
mybigrams %>% head(n = 30) %>%
mutate(skill = fct_reorder(bigram, -n)) %>%
ggplot(aes(x = skill, y = n)) +
geom_col(fill = "chocolate2") +
labs(x = "Skill", y = "Occurrences (%)",
title = paste0("Skill occurrences(%) for ", jt, " in ", loc)) +
scale_y_continuous(labels = scales::percent, breaks = seq(0, 1, 0.1)) +
scale_colour_Publication() +
theme_Publication() +
theme(axis.text.x = element_text(angle = 70, hjust = 1))
# Visualization
mybigrams %>% head(n = 30) %>%
mutate(skill = fct_reorder(bigram, -n)) %>%
ggplot(aes(x = skill, y = n)) +
geom_col(fill = "chocolate2") +
labs(x = "Skill", y = "Occurrences (%)",
title = paste0("Skill occurrences(%) for ", jt, " in ", loc)) +
scale_y_continuous(labels = scales::percent, breaks = seq(0, 1, 0.1)) +
scale_colour_Publication() +
theme_Publication()
# Visualization
mybigrams %>% head(n = 30) %>%
mutate(skill = fct_reorder(bigram, -n)) %>%
ggplot(aes(x = skill, y = n)) +
geom_col(fill = "chocolate2") +
labs(x = "Skill", y = "Occurrences (%)",
title = paste0("Skill occurrences(%) for ", jt, " in ", loc)) +
scale_y_continuous(labels = scales::percent, breaks = seq(0, 1, 0.1)) +
scale_colour_Publication() +
theme(axis.text.x = element_text(angle = 10, hjust = 1)) +
theme_Publication()
mybigrams %>% head(n = 30) %>%
mutate(skill = fct_reorder(bigram, -n)) %>%
ggplot(aes(x = skill, y = n)) +
geom_col(fill = "chocolate2") +
labs(x = "Skill", y = "Occurrences (%)",
title = paste0("Skill occurrences(%) for ", jt, " in ", loc)) +
scale_y_continuous(labels = scales::percent, breaks = seq(0, 1, 0.1)) +
scale_colour_Publication() +
theme(axis.text.x = element_text(angle = 10, hjust = 1)) +
theme_Publication()
# Visualization
mybigrams %>% head(n = 30) %>%
mutate(skill = fct_reorder(bigram, -n)) %>%
ggplot(aes(x = skill, y = n)) +
geom_col(fill = "chocolate2") +
labs(x = "Skill", y = "Occurrences (%)",
title = paste0("Skill occurrences(%) for ", jt, " in ", loc)) +
scale_y_continuous(labels = scales::percent, breaks = seq(0, 1, 0.1)) +
scale_colour_Publication() +
#theme() +
theme_Publication(axis.text.x = element_text(angle = 10, hjust = 1))
# Visualization
mybigrams %>% head(n = 30) %>%
mutate(skill = fct_reorder(bigram, -n)) %>%
ggplot(aes(x = skill, y = n)) +
geom_col(fill = "chocolate2") +
labs(x = "Skill", y = "Occurrences (%)",
title = paste0("Skill occurrences(%) for ", jt, " in ", loc)) +
scale_y_continuous(labels = scales::percent, breaks = seq(0, 1, 0.1)) +
scale_colour_Publication() +
theme_Publication() +
theme(axis.text.x = element_text( hjust = 1)) # angle = 70,
mybigrams %>% head(n = 30) %>%
mutate(skill = fct_reorder(bigram, -n)) %>%
ggplot(aes(x = skill, y = n)) +
geom_col(fill = "chocolate2") +
labs(x = "Skill", y = "Occurrences (%)",
title = paste0("Skill occurrences(%) for ", jt, " in ", loc)) +
scale_y_continuous(labels = scales::percent, breaks = seq(0, 1, 0.1)) +
scale_colour_Publication() +
theme_Publication() +
theme(axis.text.x = element_text(angle = 90,hjust = 1, vjust = 0.5)) # angle = 70,
mybigrams %>% head(n = 30) %>%
mutate(skill = fct_reorder(bigram, -n)) %>%
ggplot(aes(x = skill, y = n)) +
geom_col(fill = "chocolate2") +
labs(x = "Skill", y = "Occurrences (%)",
title = paste0("Skill occurrences(%) for ", jt, " in ", loc)) +
coord_flip() +
scale_y_continuous(labels = scales::percent, breaks = seq(0, 1, 0.1)) +
scale_colour_Publication() +
theme_Publication() +
theme(axis.text.x = element_text(angle = 90,hjust = 1, vjust = 0.5)) # angle = 70,
mybigrams %>% head(n = 30) %>%
mutate(skill = fct_reorder(bigram, n)) %>% # -n
ggplot(aes(x = skill, y = n)) +
geom_col(fill = "chocolate2") +
labs(x = "Skill", y = "Occurrences (%)",
title = paste0("Skill occurrences(%) for ", jt, " in ", loc)) +
coord_flip() +
scale_y_continuous(labels = scales::percent, breaks = seq(0, 1, 0.1)) +
scale_colour_Publication() +
theme_Publication() +
theme(axis.text.x = element_text()) # angle = 90,hjust = 1, vjust = 0.5
mybigrams %>% head(n = 40) %>%
mutate(skill = fct_reorder(bigram, n)) %>% # -n
ggplot(aes(x = skill, y = n)) +
geom_col(fill = "chocolate2") +
labs(x = "Skill", y = "Occurrences (%)",
title = paste0("Skill occurrences(%) for ", jt, " in ", loc)) +
coord_flip() +
scale_y_continuous(labels = scales::percent, breaks = seq(0, 1, 0.1)) +
scale_colour_Publication() +
theme_Publication() +
theme(axis.text.x = element_text()) # angle = 90,hjust = 1, vjust = 0.5
tail(mybigrams)
tail(mybigrams, n = 50)
tail(mybigrams, n = 50) %>% print(Inf)
mybigrams %>% print(Inf)
source(file = "scripts/01_words.R")
library(forcats)
# set url for search ------------------------------------------------------
# Indeed Search Words
base_url <- "https://www.indeed.com/"
job_title <- "data+steward"
location <- "United+States"
adv_url <- paste0(base_url,
"jobs?as_and=&as_phr=&as_any=&as_not=&as_ttl=", job_title,
"&as_cmp=&jt=all&st=employer&salary=&radius=100&l=", location,
"&fromage=any&limit=50&sort=&psf=advsrch")
cat(adv_url)
# Scrape the Search Result -----------------------------------------------------
# get the html file from search url
start_page <- read_html(adv_url)
# get the total job count
job_count <- start_page %>%
html_node("#searchCount") %>%
html_text() %>%
str_trim(side = "both")
job_count
job_count_total <-
unlist(str_split(job_count, " "))[4]
cat("Total job count: ", job_count_total)
# Get start page job URLs
links <- start_page %>%
html_nodes("h2 a") %>%
html_attr("href")
save(links, file = "results/jobs/50firstlinks.RData")
# Get result page links
page_links <- start_page %>%
html_nodes(xpath = '//div[contains(@class,"pagination")]//a') %>%
html_attr("href")
if_else(length(page_links) == 0, "Pages available: 0",
paste("Pages available: ", length(page_links)))
## Scrape for key words, can be changed
my_keywords <- c("data quality", "data management",
"ensure data", "data strategy",
"data related", "data definitions",
"computer science", "life sciences",
"data governance", "business intelligence",
"data curation", "communication skills",
"metadata")
ScrapeJobLinks <- function(res, job_links) {
for (i in seq_along(job_links)) {
job_url <- paste0(base_url, job_links[i])
Sys.sleep(1)
cat(paste0("Reading job ", i, "\n"))
tryCatch({
page_content <- getPageContent(job_url, i)
bigrams <- getPageBigrams(page_content, as.character(i))
names(bigrams) <- c("word", "n") # Change bigram for word to plot
plotWords(bigrams, as.character(i))
mywords <- getPageWords(page_content, as.character(i))
plotWords(mywords, as.character(i))
text <- page_content
text <- text$text
df <- data.frame(skill = my_keywords,
count = ifelse(str_detect(text, my_keywords), 1, 0))
res$running$count <- res$running$count + df$count
res$num_jobs <- res$num_jobs + 1
}, error = function(e) {
cat("ERROR :", conditionMessage(e), "\n")
})
}
return(res)
}
# Create running total dataframe
running <- data.frame(skill = my_keywords, count = rep(0, length(my_keywords)))
# Since the indeed only display max of 20 pages from search result, we cannot use job_count but need to track by creating a num_jobs
num_jobs <- 0
# Here is our results object that contains the two stats
results <- list("running" = running, "num_jobs" = num_jobs)
if (job_count != 0) {
cat("Scraping jobs in Start Page\n")
results <- ScrapeJobLinks(results, links)
}
length(page_links) > 0
p in seq_along(job_links) - 1
seq_along(job_links) - 1
seq_along(page_links) - 1
seq_along(page_links)
seq_along(page_links -1)
seq_along(page_links)
links
1:length(page_links) - 1
page_links[0]
1:length(page_links)
1:length(page_links) +1
1:(length(page_links) -1)
seq_along(page_links)
?seq_along()
seq(page_links, from = 1, to = length(page_links)-1)
seq_along(page_links -1)
seq_along(page_links)
seq_along(page_links) -1
new_page <- read_html(paste0(base_url, page_links[0]))
new_page
new_page <- read_html(paste0(base_url, page_links[2]))
new_page
length(page_links)
seq(page_links)
seq(page_links) - 1
seq(page_links)[-1]
seq_along(page_links)[-1]
if (length(page_links) > 0) {
for (p in seq_along(page_links)[-1]) {
cat("Moving to Next 50 jobs\n")
# Navigate to next page
new_page <- read_html(paste0(base_url, page_links[p]))
# Get new page job URLs
links <- new_page %>%
html_nodes("h2 a") %>%
html_attr("href")
# Scrap job links
results <- ScrapeJobLinks(results, links)
}
}
new_page <- read_html(paste0(base_url, page_links[2]))
new_page
source(file = "scripts/01_words.R")
library(forcats)
library(tidyverse)
# set url for search ------------------------------------------------------
# Indeed Search Words
base_url <- "https://www.indeed.com/"
job_title <- "data+scientist"
location <- "United+States"
adv_url <- paste0(base_url,
"jobs?as_and=&as_phr=&as_any=&as_not=&as_ttl=", job_title,
"&as_cmp=&jt=all&st=employer&salary=&radius=100&l=", location,
"&fromage=any&limit=50&sort=&psf=advsrch")
cat(adv_url)
# Scrape the Search Result -----------------------------------------------------
# get the html file from search url
start_page <- read_html(adv_url)
# get the total job count
job_count <- start_page %>%
html_node("#searchCount") %>%
html_text() %>%
str_trim(side = "both")
job_count
job_count_total <-
unlist(str_split(job_count, " "))[4]
cat("Total job count: ", job_count_total)
# Get start page job URLs
links <- start_page %>%
html_nodes("h2 a") %>%
html_attr("href")
save(links, file = "results/jobs/50firstlinks.RData")
# Get result page links
page_links <- start_page %>%
html_nodes(xpath = '//div[contains(@class,"pagination")]//a') %>%
html_attr("href")
if_else(length(page_links) == 0, "Pages available: 0",
paste("Pages available: ", length(page_links)))
## Scrape for key words, can be changed
my_keywords <- c("data quality", "data management",
"ensure data", "data strategy",
"data related", "data definitions",
"computer science", "life sciences",
"data governance", "business intelligence",
"data curation", "communication skills",
"metadata")
# Given running total dataframe and links to scrape skills and compute running total
ScrapeJobLinks <- function(res, job_links) {
for (i in seq_along(job_links)) {
job_url <- paste0(base_url, job_links[i])
Sys.sleep(1)
cat(paste0("Reading job ", i, "\n"))
tryCatch({
page_content <- getPageContent(job_url, i)
bigrams <- getPageBigrams(page_content, as.character(i))
names(bigrams) <- c("word", "n") # Change bigram for word to plot
plotWords(bigrams, as.character(i))
mywords <- getPageWords(page_content, as.character(i))
plotWords(mywords, as.character(i))
text <- page_content
text <- text$text
df <- data.frame(skill = my_keywords,
count = ifelse(str_detect(text, my_keywords), 1, 0))
res$running$count <- res$running$count + df$count
res$num_jobs <- res$num_jobs + 1
}, error = function(e) {
cat("ERROR :", conditionMessage(e), "\n")
})
}
return(res)
}
# Create running total dataframe
running <- data.frame(skill = my_keywords, count = rep(0, length(my_keywords)))
# Since the indeed only display max of 20 pages from search result, we cannot use job_count but need to track by creating a num_jobs
num_jobs <- 0
# Here is our results object that contains the two stats
results <- list("running" = running, "num_jobs" = num_jobs)
if (job_count != 0) {
cat("Scraping jobs in Start Page\n")
results <- ScrapeJobLinks(results, links)
}
# Create running total dataframe
running <- data.frame(skill = my_keywords, count = rep(0, length(my_keywords)))
# Since the indeed only display max of 20 pages from search result, we cannot use job_count but need to track by creating a num_jobs
num_jobs <- 0
# Here is our results object that contains the two stats
results <- list("running" = running, "num_jobs" = num_jobs)
if (job_count != 0) {
cat("Scraping jobs in Start Page\n")
results <- ScrapeJobLinks(results, links)
}
ScrapeJobLinks <- function(res, job_links) {
for (i in seq_along(job_links)) {
job_url <- paste0(base_url, job_links[i])
Sys.sleep(1)
cat(paste0("Reading job ", i, "\n"))
tryCatch({
page_content <- getPageContent(job_url, as.character(i))
bigrams <- getPageBigrams(page_content, as.character(i))
names(bigrams) <- c("word", "n") # Change bigram for word to plot
plotWords(bigrams, as.character(i))
mywords <- getPageWords(page_content, as.character(i))
plotWords(mywords, as.character(i))
text <- page_content
text <- text$text
df <- data.frame(skill = my_keywords,
count = ifelse(str_detect(text, my_keywords), 1, 0))
res$running$count <- res$running$count + df$count
res$num_jobs <- res$num_jobs + 1
}, error = function(e) {
cat("ERROR :", conditionMessage(e), "\n")
})
}
return(res)
}
# Create running total dataframe
running <- data.frame(skill = my_keywords, count = rep(0, length(my_keywords)))
# Since the indeed only display max of 20 pages from search result, we cannot use job_count but need to track by creating a num_jobs
num_jobs <- 0
# Here is our results object that contains the two stats
results <- list("running" = running, "num_jobs" = num_jobs)
if (job_count != 0) {
cat("Scraping jobs in Start Page\n")
results <- ScrapeJobLinks(results, links)
}
job_url <- paste0(base_url, job_links[1])
job_url <- paste0(base_url, links[1])
job_url
page_content <- getPageContent(job_url, as.character(i))
page_content <- getPageContent(job_url, as.character(1))
bigrams <- getPageBigrams(page_content, as.character(1))
names(bigrams) <- c("word", "n") # Change bigram for word to plot
plotWords(bigrams, as.character(i))
plotWords(bigrams, as.character(1))
mywords <- getPageWords(page_content, as.character(1))
plotWords(mywords, as.character(1))
mywords
plotWords(mywords, paste0("words", as.character(1))
)
text <- page_content
text <- text$text
df <- data.frame(skill = my_keywords,
count = ifelse(str_detect(text, my_keywords), 1, 0))
res$running$count <- res$running$count + df$count
my_keywords <- c("data quality", "data management",
"ensure data", "data strategy",
"data related", "data definitions",
"computer science", "life sciences",
"data governance", "business intelligence",
"data curation", "communication skills",
"metadata")
ScrapeJobLinks <- function(res, job_links) {
for (i in seq_along(job_links)) {
job_url <- paste0(base_url, job_links[i])
Sys.sleep(1)
cat(paste0("Reading job ", i, "\n"))
tryCatch({
page_content <- getPageContent(job_url, as.character(i))
bigrams <- getPageBigrams(page_content, as.character(i))
names(bigrams) <- c("word", "n") # Change bigram for word to plot
plotWords(bigrams, paste0("bigrams", as.character(i)))
mywords <- getPageWords(page_content, as.character(i))
plotWords(mywords, paste0("words", as.character(i)))
text <- page_content
text <- text$text
df <- data.frame(skill = my_keywords,
count = ifelse(str_detect(text, my_keywords), 1, 0))
res$running$count <- res$running$count + df$count
res$num_jobs <- res$num_jobs + 1
}, error = function(e) {
cat("ERROR :", conditionMessage(e), "\n")
})
}
return(res)
}
## Actual Scraping
# Create running total dataframe
running <- data.frame(skill = my_keywords, count = rep(0, length(my_keywords)))
# Since the indeed only display max of 20 pages from search result, we cannot use job_count but need to track by creating a num_jobs
num_jobs <- 0
# Here is our results object that contains the two stats
results <- list("running" = running, "num_jobs" = num_jobs)
if (job_count != 0) {
cat("Scraping jobs in Start Page\n")
results <- ScrapeJobLinks(results, links)
}
# libraries ---------------------------------------------------------------
library(tidyverse)
ReadMyDataFiles <- function(pattern = pattern, path = "./") {
map(list.files(path = path, pattern = pattern, full.names = TRUE),
read_csv)
}
safely_ReadMyDataFiles <- safely(ReadMyDataFiles)
check1 <- safely_ReadMyDataFiles(pattern = ".csv", path = "results/bigrams/")
allbigrams <-
check1$result %>%
map_df(~(.))
#View(allbigrams)
class(allbigrams)
dim(allbigrams)
rm(check1)
# test for duplicated bigrams
allbigrams %>%
distinct(bigram) %>%
dim()
mybigrams <-
allbigrams %>%
filter(!str_detect(bigram, pattern = "[\\d]")) %>%  # remove if any words are numbers
mutate(oc = 1) %>% # uniform bigrams counts 1 per file
arrange(bigram) %>%
group_by(bigram) %>%
summarise(n = sum(oc)) %>%
ungroup() %>%
arrange(desc(n))
dim(mybigrams)
head(mybigrams, n = 30)
mybigrams %>% print(n = 20)
# running total count as percentage
mybigrams$n <- mybigrams$n / 50
# Reformat the Job Title and Location to readable form
jt <- str_replace_all(job_title, '\\+|\\\"', " ")
loc <- str_replace_all(location, "\\%2C+|\\+", " ")
# Visualization
mybigrams %>% head(n = 40) %>%
mutate(skill = fct_reorder(bigram, n)) %>% # -n
ggplot(aes(x = skill, y = n)) +
geom_col(fill = "chocolate2") +
labs(x = "Skill", y = "Occurrences (%)",
title = paste0("Skill occurrences(%) for ", jt, " in ", loc)) +
coord_flip() +
scale_y_continuous(labels = scales::percent, breaks = seq(0, 1, 0.1)) +
scale_colour_Publication() +
theme_Publication() +
theme(axis.text.x = element_text()) # angle = 90,hjust = 1, vjust = 0.5
